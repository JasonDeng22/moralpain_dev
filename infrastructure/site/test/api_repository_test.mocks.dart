// Mocks generated by Mockito 5.2.0 from annotations
// in admin/test/api_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moralpainapi/moralpainapi.dart' as _i3;

import 'api_repository_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLogger_0 extends _i1.Fake implements _i2.Logger {}

class _FakeMoralpainapi_1 extends _i1.Fake implements _i3.Moralpainapi {}

class _FakeSubmissions_2 extends _i1.Fake implements _i3.Submissions {}

/// A class which mocks [MockApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockApiRepository extends _i1.Mock implements _i4.MockApiRepository {
  MockMockApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_0())
          as _i2.Logger);
  @override
  _i3.Moralpainapi get mapi => (super.noSuchMethod(Invocation.getter(#mapi),
      returnValue: _FakeMoralpainapi_1()) as _i3.Moralpainapi);
  @override
  _i5.Future<_i3.Submissions> fetchSubmissions(
          {int? starttime, int? endtime, int? minscore, int? maxscore}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchSubmissions, [], {
                #starttime: starttime,
                #endtime: endtime,
                #minscore: minscore,
                #maxscore: maxscore
              }),
              returnValue: Future<_i3.Submissions>.value(_FakeSubmissions_2()))
          as _i5.Future<_i3.Submissions>);
}
