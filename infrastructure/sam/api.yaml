openapi: "3.0.1"
info:
  title: MoralDistress API
  description: MoralDistress API.
  version: 1.0.0
paths:
  /survey:
    get:
      operationId: getSurvey
      summary: Fetch moral distress survey
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/survey'
      x-amazon-apigateway-integration:
        httpMethod: get
        type: aws
        uri: arn:aws:apigateway:${AWS::Region}:s3:path/moralpain-resources/questionnaire.json
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_survey_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    post:
      operationId: submitSurvey
      summary: Submit completed moral distress survey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submission'
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmitSurvey/invocations
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_completed_survey_post_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      operationId: optionsSurvey
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /resiliency:
    get:
      operationId: getResiliencyResources
      summary: Fetch resiliency resource list
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resiliencyResources'
      x-amazon-apigateway-integration:
        httpMethod: get
        type: aws
        uri: arn:aws:apigateway:${AWS::Region}:s3:path/moralpain-resources/resiliency_resources.json
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_resiliency_resources_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    post:
      operationId: submitVisitedResiliencyResources
      summary: Submit visited resiliency resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/visitedResiliencyResources'
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmitVisitedResiliencyResources/invocations
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_visited_resources_post_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      operationId: optionsVisitedResiliencyResources
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /admin/submissions:
    get:
      operationId: getSubmissions
      summary: Fetch the submitted survey results.
      parameters:
        - in: query
          name: starttime
          description: Minimum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1640995200
        - in: query
          name: endtime
          description: Maximum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1647907200
        - in: query
          name: minscore
          description: Minimum possible score of a record.
          schema:
            type: integer
            minimum: 0
            maximum: 10
          example: 1
        - in: query
          name: maxscore
          description: Maximum possible score of a record.
          schema:
            type: integer
            minimum: 0
            maximum: 10
          example: 5
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submissions'
        '400':
          description: 400 Bad Request
  /admin/analytics:
    get:
      operationId: getAnalytics
      summary: Calculate basic analytics on the data
      parameters:
        - in: query
          name: starttime
          description: Minimum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1640995200
        - in: query
          name: endtime
          description: Maximum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1647907200
        - in: query
          name: operation
          description: The analytic operation to perform on the data.
          required: true
          schema:
            type: string
            enum:
              - average
              - count
              - maximum
              - minimum
          example: count
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submissions'
        '400':
          description: 400 Bad Request


components:
  schemas:
    survey:
      type: object
      properties:
        version:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/surveySection'
    surveySection:
      type: object
      properties:
        sectionId:
          type: string
        title:
          type: string
        subtitle:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/surveyOption'
    surveyOption:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
    submissions:
      type: array
      items:
        $ref: '#/components/schemas/submission'
    submission:
      type: object
      properties:
        score:
          type: integer
        selections:
          type: array
          items:
            type: string
        timestamp:
          type: integer
        id:
          type: string
    resiliencyResources:
      type: object
      properties:
        version:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/resiliencyResource'
    resiliencyResource:
      type: object
      properties:
        resourceId:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        icon:
          $ref: '#/components/schemas/icon'
    icon:
      type: object
      properties:
        codePoint:
          type: string
        fontFamily:
          type: string
        fontPackage:
          type: string
    visitedResiliencyResources:
      type: object
      properties:
        selections:
          type: array
          items:
            type: string
        timestamp:
          type: integer
    analyticsResult:
      type: object
      properties:
        operation:
          type: string
          enum:
            - average
            - count
            - maximum
            - minimum
        value:
          type: number
